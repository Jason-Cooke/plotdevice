#!/usr/bin/env python
# encoding: utf-8
"""
plotdevice.py

usage: plotdevice [-h] [-f] [-b] [--virtualenv PATH] [--export FILE]
               [--frames N or M-N] [--fps N] [--rate N] [--loop [N]] [--live]
               [--args [a [b ...]]]
               file

Run python scripts in PlotDevice.app or export graphics to a document (pdf/eps),
image (png/gif/jpg/tiff), or movie (mov/gif).

  Run a script:
    plotdevice script.py

  Run fullscreen:
    plotdevice -f script.py

  Save script's output to pdf:
    plotdevice script.py --export output.pdf

  Create an animated gif that loops every 2 seconds:
    plotdevice script.py --export output.gif --frames 60 --fps 30 --loop

  Create a sequence of numbered png files â€“ one for each frame in the animation:
    plotdevice script.py --export output.png --frames 10

  Create a 5 second long H.264 video at 2 megabits/sec:
    plotdevice script.py --export output.mov --frames 150 --rate 2.0

Options:
  -h, --help          show this help message and exit
  -f                  run full-screen
  -b                  run PlotDevice in the background
  --virtualenv PATH   path to virtualenv whose libraries you want to use (this
                      should point to the top-level virtualenv directory; a
                      folder containing a lib/python2.7/site-packages
                      subdirectory)
  --export FILE       a destination filename ending in pdf, eps, png, tiff,
                      jpg, gif, or mov
  --frames N or M-N   number of frames to render or a range specifying the
                      first and last frames (default "1-")
  --fps N             frames per second in exported video (default 30)
  --rate N            bitrate in megabits per second (video only)
  --loop [N]          number of times to loop an exported animated gif (omit N
                      to loop forever)
  --live              re-render graphics each time the file is saved
  --args [a [b ...]]  arguments to be passed to the script as sys.argv

PlotDevice Script File:
  file                the python script to be rendered
"""

import sys, os
import argparse
import socket
import json
import signal

from time import sleep
from subprocess import Popen, PIPE
from os.path import exists, islink, dirname, abspath, realpath, join

def main():
  """Run python scripts in a window/PlotDevice.app or export graphics to a document (pdf/eps), image (png/gif/jpg/tiff), or movie (mov/gif)."""
  opts = parse_args()
  if opts.export or not app_path():
    exec_console(opts)
  else:
    exec_application(opts)

def exec_console(opts):
  """Run script from the console"""
  def cancel(*args):
    p.stdin.write("CANCEL\n")
    p.stdin.flush()
  signal.signal(signal.SIGINT, cancel)

  env = dict(os.environ)
  task, env['PYTHONPATH'] = task_path()
  p = Popen(['/usr/bin/python', task], env=env, stdin=PIPE)
  p.stdin.write(json.dumps(vars(opts))+"\n")
  p.wait()

def exec_application(opts):
  """Launch PlotDevice.app if needed and run the script (while echoing output to the console)"""
  sock = connect()
  if not sock:
    os.system('open -a "%s" "%s"'%(app_path() or 'PlotDevice.app', opts.file))
    sock = connect(retry=12)
  if not sock:
    print "Couldn't connect to the PlotDevice application on port", default_port()
    sys.exit(1)

  try:
    def stop(*args):
      sock.sendall('STOP\n')
    signal.signal(signal.SIGINT, stop)
    sock.sendall(json.dumps(vars(opts)) + "\n")
    read_and_echo(sock)
  finally:
    sock.close()

def parse_args():
  parser = argparse.ArgumentParser(description=main.__doc__, add_help=False)
  o = parser.add_argument_group("Options", None)
  o.add_argument('-h','--help', action='help', help='show this help message and exit')
  o.add_argument('-f', dest='fullscreen', action='store_const', const=True, default=False, help='run full-screen')
  o.add_argument('-b', dest='activate', action='store_const', const=False, default=True, help='run PlotDevice in the background')
  o.add_argument('--virtualenv', metavar='PATH', help='path to virtualenv whose libraries you want to use (this should point to the top-level virtualenv directory; a folder containing a lib/python2.7/site-packages subdirectory)')
  o.add_argument('--export', metavar='FILE', help='a destination filename ending in pdf, eps, png, tiff, jpg, gif, or mov')
  o.add_argument('--frames', metavar='N or M-N', help='number of frames to render or a range specifying the first and last frames (default "1-")')
  o.add_argument('--fps', metavar='N', default=30, type=int, help='frames per second in exported video (default 30)')
  o.add_argument('--rate', metavar='N', default=1.0, type=float, dest='bitrate', help='bitrate in megabits per second (video only)')
  o.add_argument('--loop', metavar='N', default=0, nargs='?', const=-1, help='number of times to loop an exported animated gif (omit N to loop forever)')
  o.add_argument('--live', action='store_const', const=True, help='re-render graphics each time the file is saved')
  o.add_argument('--args', nargs='*', default=[], metavar=('a','b'), help='arguments to be passed to the script as sys.argv')
  i = parser.add_argument_group("PlotDevice Script File", None)
  i.add_argument('file', help='the python script to be rendered')
  opts = parser.parse_args()

  if opts.virtualenv:
    libdir = '%s/lib/python2.7/site-packages'%opts.virtualenv
    if exists(libdir):
      opts.virtualenv = abspath(libdir)
    else:
      parser.exit(1, "bad argument [--virtualenv]\nvirtualenv site-packages dir not found: %s\n"%libdir)

  if opts.file:
    opts.file = abspath(opts.file)
    if not exists(opts.file):
      parser.exit(1, "file not found: %s\n"%opts.file)

  if opts.frames:
    try:
      frames = [int(f) if f else None for f in opts.frames.split('-')]
    except ValueError:
      parser.exit(1, 'bad argument [--frame]\nmust be a single integer ("42") or a hyphen-separated range ("33-66").\ncouldn\'t make sense of "%s"\n'%opts.frames)

    if len(frames) == 1:
      opts.first, opts.last = (1, int(frames[0]))
    elif len(frames) == 2:
      if frames[1] is not None and frames[1]<frames[0]:
        parser.exit(1, "bad argument [--frame]\nfinal-frame number is less than first-frame\n")
      opts.first, opts.last = frames
  else:
    opts.first, opts.last = (1, None)
  del opts.frames

  if opts.export:
    # screen out unsupported file extensions
    _, ext = opts.export.lower().rsplit('.',1)
    if ext not in ('pdf', 'eps', 'png', 'tiff', 'jpg', 'gif', 'mov'):
      parser.exit(1, 'bad argument [--export]\nthe output filename must end with a supported format:\n  pdf, eps, png, tiff, jpg, gif, or mov\n')

    # make sure the output path is sane
    if '/' in opts.export:
      export_dir = dirname(opts.export)
      if not exists(export_dir):
        parser.exit(1,'export directory not found: %s\n'%abspath(export_dir))
    opts.export = abspath(opts.export)

    # movies aren't allowed to be infinitely long (sorry)
    if opts.last is None and ext in ('mov','gif'):
      opts.first, opts.last = (1, 150)

  return opts

def connect(retry=0, delay=0):
  port = default_port()
  if delay:
    sleep(delay)
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  try:
    sock.connect(("localhost", port))
  except socket.error, e:
    if not retry:
      return None
    return connect(retry-1, delay=.2)
  return sock

def app_path():
  parent = dirname(realpath(__file__)) if islink(__file__) else abspath(dirname(__file__))
  try:
    # we're being called from within an app bundle
    return parent[:parent.index('PlotDevice.app')+len('PlotDevice.app')]
  except ValueError:
    # no app bundle present, we're part of a module install instead
    return None

def module_path():
  for root in sys.path:
    module = join(root, 'plotdevice')
    if exists(join(module,'__init__.py')):
      return abspath(module)
  raise ImportError

def task_path():
  """Find the path of task.py within the plotdevice module and update PYTHONPATH if needed"""
  script_path = None
  py_path = os.getenv('PYTHONPATH','').split(':')

  try:
    # running from a virtualenv
    module = module_path()
    script_path = join(module, 'run/task.py')
    py_path.append(dirname(module)) # append the site-packages dir
  except ImportError:
    if app_path():
      # running from the app bundle
      script_path = "%s/%s" % (app_path(), 'Contents/Resources/python/plotdevice/run/task.py')
    else:
      # running from the source dist
      dist_path = abspath('%s/..'%dirname(__file__))
      script_path = "%s/plotdevice/run/task.py"%dist_path
      py_path.append(dist_path) # add the plotdevice dir to the path
      py_path.append('%s/build/lib.macosx-10.9-intel-2.7'%dist_path) # add the .so files

  return script_path, ":".join(py_path)

def default_port():
  from Foundation import NSUserDefaults
  appdefaults = NSUserDefaults.standardUserDefaults().persistentDomainForName_('net.plotdevice.PlotDevice')
  return appdefaults.objectForKey_('plotdevice:remote-port') or 9001

def read_and_echo(sock):
  response = sock.recv(80)
  while response:
    sys.stdout.write(response)
    sys.stdout.flush()
    try:
      response = sock.recv(80)
    except socket.error, e:
      break # bail out on ctrl-c

if __name__ == "__main__":
  main()
