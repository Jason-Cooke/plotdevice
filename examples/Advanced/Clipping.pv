size(300,300)
# PlotDevice can use any Bezier path as a clipping "mask" to matte-out
# shapes you draw to the canvas. The clip() and mask() commands work with
# drawing primitives as well as text and images.

# ---- Clipping with Primitive Shapes ---- #

# Transformation commands can have an effect on the clipped path, the
# drawing that occurs within the clipping mask, or both. In this case
# we only want our arrow-shaped mask to be rotated (not its contents).
# So we'll generate its Bezier inside a `with rotate' block.

# Rotate the arrow to let it point down.
with rotate(-90):
    # The last parameter instructs the command to return the arrow shape
    # as a Bezier object rather than drawing it to the canvas.
    p = arrow(250, 100, 200, plot=False)

# Beziers have a particularly useful property called `bounds` that returns
# the dimensions of the "bounding box". We'll use these coordinates to
# figure out where to draw ovals so they lie inside the visible portion.
(x,y), (w,h) = p.bounds

# All drawing commands inside of the `with clip()' block are clipped
# according to the given path (in this case the arrow we just defined).
with clip(p):
    # Draw 200 rects of a random size and position them within the bounds
    for i in range(200):
        fill(random(), 0.7, 0, random())
        s = random(50)
        rect(x+random(w), y+random(h), s, s)

# ---- Clipping with Text ---- #

# Clipping with text works just like clipping with shapes. The clip() and
# mask() commands can both work with text() objects, but in this case we'll
# use textpath() to generate a Bezier instead (since we need to access its
# `bounds` property).

# Set the font. Note that all state operations work as expected for the
# textpath() command just as they would with text()
font("Lucida Grande", "bold", 72)
align(CENTER)

# Return a path that can be used for clipping. Textpaths never draw on screen.
p = textpath("Clipped", WIDTH/2, 270)

# As before, we'll use the Bezier path's bounds to position our clipped contents
(x,y), (w,h) = p.bounds

# use the text's boundaries as a clipping mask
with clip(p):
    # Draw 200 circles with random sizes and positions.
    for i in range(105):
        fill(random(), random(), 0, random())
        s = random(30)
        arc(x+random(w), y+random(h), s)
